// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IdsvrHaapiDriver
import Combine
import CommonCrypto
import Compression
import CryptoKit
import DeviceCheck
import Foundation
import LocalAuthentication
import OSLog
import Security
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol Masking {
  var masked: Swift.String { get }
}
extension Swift.String : IdsvrHaapiDriver.Masking {
  public var masked: Swift.String {
    get
  }
}
extension ObjectiveC.NSObject : IdsvrHaapiDriver.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URL : IdsvrHaapiDriver.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.Data : IdsvrHaapiDriver.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.Dictionary : IdsvrHaapiDriver.Masking where Key == Swift.String {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URLRequest : IdsvrHaapiDriver.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.String {
  public static func optionalData(_ data: Foundation.Data?, encoding: Swift.String.Encoding = .utf8, fallback: Swift.String = "") -> Swift.String
  public var maskedPrefix: Swift.String {
    get
  }
}
@available(iOS 13.0, *)
extension Swift.StringProtocol {
  public var sha256Hex: Swift.String {
    get
  }
  public var dataUtf8Encoding: Foundation.Data {
    get
  }
}
extension Foundation.Data {
  public var stringUtf8Encoding: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Haapi : ObjectiveC.NSObject {
  @objc public static var isSupported: Swift.Bool {
    @objc get
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14, *)
public enum HaapiError : IdsvrHaapiDriver.IdsvrError, Swift.Error {
  case communication(message: Swift.String, cause: (any Swift.Error)? = nil)
  case serverError(_: Swift.String, errorDescription: Swift.String, statusCode: Swift.Int)
  @available(*, deprecated, message: "This case is being replaced by `serverError`.")
  case invalidStatusCode(_: Swift.Int)
  case invalidURLResponse(_: Foundation.URLResponse?, reason: Swift.String, cause: (any Swift.Error)? = nil)
  case attestationNotSupported
  case attestationFailure(cause: (any Swift.Error)? = nil)
  case attestationKeyGenFailure(cause: (any Swift.Error)? = nil)
  case attestationRefusedByServer(cause: (any Swift.Error)? = nil)
  case assertionFailure(cause: (any Swift.Error)? = nil)
  case dpopKeyCreationFailure(cause: any Swift.Error)
  case dpopProofCreationFailure(cause: any Swift.Error)
  case dpopProofFailure(message: Swift.String, cause: any Swift.Error)
  case haapiTokenManagerIsClosed
  case haapiTokenManagerIsExpired
  case illegalState(message: Swift.String)
  case invalidConfiguration(reason: Swift.String)
  case haapiTokenManagerAlreadyExists(name: Swift.String)
  public var failureReason: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var error: Swift.String {
    get
  }
  public var cause: (any Swift.Error)? {
    get
  }
  public var recoverySuggestion: IdsvrHaapiDriver.IdsvrErrorHandling {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
public class KeychainStorage : IdsvrHaapiDriver.Storage {
  public func write(key: Swift.String, data: Foundation.Data) throws
  public func read(key: Swift.String) throws -> Foundation.Data?
  public func delete(key: Swift.String) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class Dpop : ObjectiveC.NSObject, Swift.Codable {
  @objc public var jwkThumbprint: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc @available(swift, obsoleted: 0.1, message: "Use `createProof(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func createProof(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func createProof(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc @available(swift, obsoleted: 0.1, message: "Use `getHeaderValue(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class HaapiTokenResult : ObjectiveC.NSObject {
  @objc final public let dPopAccessTokenInfo: IdsvrHaapiDriver.DpopAccessTokenInfo?
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class HaapiTokenManager : ObjectiveC.NSObject {
  @objc final public var dpop: IdsvrHaapiDriver.Dpop? {
    @objc get
  }
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiDriver.HaapiTokenManager {
  @objc final public func createClient(urlSession: Foundation.URLSession? = nil) -> IdsvrHaapiDriver.HaapiClient
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiDriver.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, completionHandler: @escaping (IdsvrHaapiDriver.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiDriver.DpopAccessTokenInfo, IdsvrHaapiDriver.HaapiError>) -> Swift.Void)
  @objc final public func close()
  @objc final public func clearState()
  @available(*, unavailable, renamed: "getHaapiToken(forceFresh:dpopNonce:completionHandler:)", message: "Deprecated. Please use getHaapiToken(forceFresh:dpopNonce:completionHandler:)")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiDriver.DpopAccessTokenInfo, IdsvrHaapiDriver.HaapiError>) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (IdsvrHaapiDriver.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiDriver.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false) -> IdsvrHaapiDriver.HaapiTokenResult?
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String?) -> IdsvrHaapiDriver.HaapiTokenResult?
}
public protocol FollowUpTag {
  var subsystem: Swift.String { get }
  var tagName: Swift.String { get }
}
extension IdsvrHaapiDriver.FollowUpTag {
  public var osLog: os.OSLog {
    get
  }
}
@available(iOS 14, *)
public enum HttpHeaderNames {
  public static let accept: Swift.String
  public static let authorization: Swift.String
  public static let contentType: Swift.String
  public static let dpop: Swift.String
  public static let haapiSessionId: Swift.String
  public static let haapiSetSessionId: Swift.String
  public static let dpopNonce: Swift.String
  public static let wwwAuthenticate: Swift.String
}
@available(iOS 14, *)
public enum MimeTypes : Swift.String {
  case happi
  case json
  case xWwwFormUrlEncoded
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum CryptoKeyType : Swift.Int, Swift.RawRepresentable {
  case p256
  case secureEnclave
  case security
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@objc public protocol TokenBoundConfiguration {
  @objc var keyPairType: IdsvrHaapiDriver.CryptoKeyType { get }
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@objc final public class UnboundedTokenConfiguration : ObjectiveC.NSObject, IdsvrHaapiDriver.TokenBoundConfiguration {
  @objc final public var keyPairType: IdsvrHaapiDriver.CryptoKeyType
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14.0, *)
@objc final public class BoundedTokenConfiguration : ObjectiveC.NSObject, IdsvrHaapiDriver.TokenBoundConfiguration {
  @objc final public let keyPairType: IdsvrHaapiDriver.CryptoKeyType
  public init(keyPairType: IdsvrHaapiDriver.CryptoKeyType = .secureEnclave)
  @objc deinit
}
@available(iOS 14, *)
public enum StorageError : Swift.Error {
  case writeError(cause: any Swift.Error)
  case readError(cause: any Swift.Error)
  case deleteError(cause: any Swift.Error)
}
@available(iOS 14, *)
extension IdsvrHaapiDriver.StorageError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 14, *)
public protocol Storage {
  func read(key: Swift.String) throws -> Foundation.Data?
  func write(key: Swift.String, data: Foundation.Data) throws
  func delete(key: Swift.String) throws
}
public enum DriverFollowUpTag : Swift.String, IdsvrHaapiDriver.FollowUpTag, Swift.CaseIterable {
  case flow
  case storage
  case http
  case attestation
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiDriver.DriverFollowUpTag]
  public typealias RawValue = Swift.String
  public static var allCases: [IdsvrHaapiDriver.DriverFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14, *)
extension Foundation.URLResponse {
  public func haapiSessionId() -> Swift.String?
  public func dpopNonce() -> Swift.String?
}
@available(iOS 14, *)
extension Foundation.URLRequest {
  public mutating func addAuthorizationHeader(headerValue: Swift.String)
  public mutating func addDpopHeader(headerValue: Swift.String)
  public mutating func addDpopAccessTokenHeaders(from dpopAccessTokenInfo: IdsvrHaapiDriver.DpopAccessTokenInfo, httpMethod: Swift.String, url: Foundation.URL) throws
  public mutating func addHaapiMediaTypeAcceptHeader()
  public mutating func addHaapiSessionIdHeader(_ sessionId: Swift.String)
}
@available(iOS 14, *)
public struct ResponseAndData {
  public let response: Foundation.URLResponse
  public let data: Foundation.Data?
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class HaapiClient : ObjectiveC.NSObject {
  public var dpop: IdsvrHaapiDriver.Dpop? {
    get
  }
  public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Swift.Result<IdsvrHaapiDriver.ResponseAndData, any Swift.Error>) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiDriver.CryptoKeyType : Swift.Codable {
}
public enum RetryCondition {
  case now
  case whenAppInForeground
  public static func == (a: IdsvrHaapiDriver.RetryCondition, b: IdsvrHaapiDriver.RetryCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UnrecoverableAction : Swift.Equatable {
  case modifyConfiguration(reason: Swift.String)
  case introspectCause
  case invalidPlatform
  public static func == (a: IdsvrHaapiDriver.UnrecoverableAction, b: IdsvrHaapiDriver.UnrecoverableAction) -> Swift.Bool
}
public enum IdsvrErrorHandling {
  case retryable(condition: IdsvrHaapiDriver.RetryCondition)
  case newHaapiFlow
  case unrecoverable(action: IdsvrHaapiDriver.UnrecoverableAction)
}
public protocol IdsvrError : Swift.Error {
  var error: Swift.String { get }
  var errorDescription: Swift.String? { get }
  var failureReason: Swift.String { get }
  var recoverySuggestion: IdsvrHaapiDriver.IdsvrErrorHandling { get }
  var cause: (any Swift.Error)? { get }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class AccessToken : ObjectiveC.NSObject {
  @objc final public let value: Swift.String
  @objc final public let expiresOn: Foundation.Date
  @objc public func isValid(atTime: Foundation.Date, minTtl: Foundation.TimeInterval) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class DpopAccessTokenInfo : ObjectiveC.NSObject {
  @objc final public let accessToken: IdsvrHaapiDriver.AccessToken
  @objc final public let dpop: IdsvrHaapiDriver.Dpop
  @objc final public let dpopNonce: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc public func dpopHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func authorizationHeaderValue() -> Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HaapiLogger : ObjectiveC.NSObject {
  public static var followUpTags: [any IdsvrHaapiDriver.FollowUpTag] {
    get
    set
  }
  @objc public static var isDebugEnabled: Swift.Bool
  @objc public static var isInfoEnabled: Swift.Bool
  @objc public static var isWarningEnabled: Swift.Bool
  @objc public static var isErrorEnabled: Swift.Bool
  @objc public static var isSensitiveValueMasked: Swift.Bool
  public static func appendLogSink(_ logSink: any IdsvrHaapiDriver.LogSink)
  @objc deinit
}
public enum LogType : Swift.String {
  case debug
  case error
  case info
  case warning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LogSink {
  func writeLog(logType: IdsvrHaapiDriver.LogType, followUpTag: any IdsvrHaapiDriver.FollowUpTag, message: Swift.String, file: Swift.String, line: Swift.Int)
}
@objc @available(iOS 14.0, *)
@objcMembers public class HaapiTokenManagerBuilder : ObjectiveC.NSObject {
  @objc public init(tokenEndpoint: Foundation.URL, clientId: Swift.String)
  @objc @discardableResult
  public func setName(_ name: Swift.String) -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setInternalUrlSession(_ urlSession: Foundation.URLSession) -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setHaapiTokenMinTtl(_ minTtl: Foundation.TimeInterval) -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func disableDeviceCheckAttestation() -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setAttestationMaxRetryCount(maxRetries: Swift.Int) -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setTokenBoundConfiguration(config: any IdsvrHaapiDriver.TokenBoundConfiguration) -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc public func build() throws -> IdsvrHaapiDriver.HaapiTokenManager
  @objc deinit
}
@available(iOS 14, *)
extension IdsvrHaapiDriver.MimeTypes : Swift.Equatable {}
@available(iOS 14, *)
extension IdsvrHaapiDriver.MimeTypes : Swift.Hashable {}
@available(iOS 14, *)
extension IdsvrHaapiDriver.MimeTypes : Swift.RawRepresentable {}
extension IdsvrHaapiDriver.CryptoKeyType : Swift.Equatable {}
extension IdsvrHaapiDriver.CryptoKeyType : Swift.Hashable {}
extension IdsvrHaapiDriver.DriverFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiDriver.DriverFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiDriver.DriverFollowUpTag : Swift.RawRepresentable {}
extension IdsvrHaapiDriver.RetryCondition : Swift.Equatable {}
extension IdsvrHaapiDriver.RetryCondition : Swift.Hashable {}
extension IdsvrHaapiDriver.LogType : Swift.Equatable {}
extension IdsvrHaapiDriver.LogType : Swift.Hashable {}
extension IdsvrHaapiDriver.LogType : Swift.RawRepresentable {}
