// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IdsvrHaapiDriver
import Combine
import CommonCrypto
import Compression
import CryptoKit
import DeviceCheck
import Foundation
import LocalAuthentication
import Security
import Swift
import os
@objc @_inheritsConvenienceInitializers public class Haapi : ObjectiveC.NSObject {
  @objc public static var isSupported: Swift.Bool {
    @objc get
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc deinit
}
public enum HaapiError : Swift.Error {
  case communication(message: Swift.String, cause: Swift.Error? = nil)
  case serverError(statusCode: Swift.Int)
  case attestationNotSupported
  case attestationFailure(cause: Swift.Error? = nil)
  case attestationKeyGenFailure(cause: Swift.Error? = nil)
  case attestationRefusedByServer(cause: Swift.Error? = nil)
  case assertionFailure(cause: Swift.Error? = nil)
  case dpopKeyCreationFailure(cause: Swift.Error)
  case dpopProofCreationFailure(cause: Swift.Error)
  case haapiTokenManagerIsClosed
  case haapiTokenManagerIsExpired
  case illegalState(message: Swift.String)
}
extension HaapiError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class Dpop : ObjectiveC.NSObject {
  @objc final public let jwkThumbprint: Swift.String
  @objc public func createProof(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class HaapiTokenResult : ObjectiveC.NSObject {
  @objc final public let dPopAccessTokenInfo: IdsvrHaapiDriver.DpopAccessTokenInfo?
  @objc final public let error: Swift.Error?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class HaapiTokenManager : ObjectiveC.NSObject {
  @available(swift, deprecated: 5.0, message: "HaapiTokenManager.Builder will not be supported, please use HaapiTokenManagerBuilder instead")
  public class Builder {
    public init(tokenEndpoint: Foundation.URL, clientId: Swift.String)
    public func setName(_ name: Swift.String) -> IdsvrHaapiDriver.HaapiTokenManager.Builder
    @available(swift, deprecated: 5.0, message: "Storage will not be supported in the next version")
    public func setStorage(_ storage: IdsvrHaapiDriver.Storage) -> IdsvrHaapiDriver.HaapiTokenManager.Builder
    public func setInternalUrlSession(_ urlSession: Foundation.URLSession) -> IdsvrHaapiDriver.HaapiTokenManager.Builder
    public func setHaapiTokenMinTtl(_ minTtl: Foundation.TimeInterval) -> IdsvrHaapiDriver.HaapiTokenManager.Builder
    @discardableResult
    public func disableDeviceCheckAttestation() -> IdsvrHaapiDriver.HaapiTokenManager.Builder
    public func build() -> IdsvrHaapiDriver.HaapiTokenManager
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
extension HaapiTokenManager {
  @objc final public func createClient(urlSession: Foundation.URLSession? = nil) -> IdsvrHaapiDriver.HaapiClient
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (Swift.Result<IdsvrHaapiDriver.DpopAccessTokenInfo, IdsvrHaapiDriver.HaapiError>) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (IdsvrHaapiDriver.DpopAccessTokenInfo?, Swift.Error?) -> Swift.Void)
  final public func getHaapiToken(forceFresh: Swift.Bool = false) -> Swift.Result<IdsvrHaapiDriver.DpopAccessTokenInfo, IdsvrHaapiDriver.HaapiError>
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false) -> IdsvrHaapiDriver.HaapiTokenResult?
  @objc final public func close()
  @objc final public func clearState()
}
public enum HttpHeaderNames {
  public static let accept: Swift.String
  public static let authorization: Swift.String
  public static let contentType: Swift.String
  public static let dpop: Swift.String
  public static let haapiSessionId: Swift.String
  public static let haapiSetSessionId: Swift.String
}
public enum MimeTypes : Swift.String {
  case happi
  case json
  case xWwwFormUrlEncoded
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StorageError : Swift.Error {
  case writeError(cause: Swift.Error)
  case readError(cause: Swift.Error)
  case deleteError(cause: Swift.Error)
}
extension StorageError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol Storage {
  func read(key: Swift.String) throws -> Foundation.Data?
  func write(key: Swift.String, data: Foundation.Data) throws
  func delete(key: Swift.String) throws
}
@_hasMissingDesignatedInitializers public class KeychainStorage : IdsvrHaapiDriver.Storage {
  public func write(key: Swift.String, data: Foundation.Data) throws
  public func read(key: Swift.String) throws -> Foundation.Data?
  public func delete(key: Swift.String) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HaapiDriverLogger : ObjectiveC.NSObject {
  @objc public static var enabled: Swift.Bool
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc deinit
}
extension URLResponse {
  public func haapiSessionId() -> Swift.String?
}
extension URLRequest {
  public mutating func addAuthorizationHeader(headerValue: Swift.String)
  public mutating func addDpopHeader(headerValue: Swift.String)
  public mutating func addDpopAccessTokenHeaders(from dpopAccessTokenInfo: IdsvrHaapiDriver.DpopAccessTokenInfo, httpMethod: Swift.String, url: Foundation.URL) throws
  public mutating func addHaapiMediaTypeAcceptHeader()
  public mutating func addHaapiSessionIdHeader(_ sessionId: Swift.String)
}
public struct ResponseAndData {
  public let response: Foundation.URLResponse
  public let data: Foundation.Data?
}
@objc @_hasMissingDesignatedInitializers public class HaapiClient : ObjectiveC.NSObject {
  public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Swift.Result<IdsvrHaapiDriver.ResponseAndData, Swift.Error>) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AccessToken : ObjectiveC.NSObject {
  @objc final public let value: Swift.String
  @objc final public let expiresOn: Foundation.Date
  @objc public func isValid(atTime: Foundation.Date, minTtl: Foundation.TimeInterval) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DpopAccessTokenInfo : ObjectiveC.NSObject {
  @objc final public let accessToken: IdsvrHaapiDriver.AccessToken
  @objc final public let dpop: IdsvrHaapiDriver.Dpop
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func dpopHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func authorizationHeaderValue() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class HaapiTokenManagerBuilder : ObjectiveC.NSObject {
  @objc public init(tokenEndpoint: Foundation.URL, clientId: Swift.String)
  @objc @discardableResult
  public func setName(_ name: Swift.String) -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setInternalUrlSession(_ urlSession: Foundation.URLSession) -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setHaapiTokenMinTtl(_ minTtl: Foundation.TimeInterval) -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func disableDeviceCheckAttestation() -> IdsvrHaapiDriver.HaapiTokenManagerBuilder
  @objc public func build() -> IdsvrHaapiDriver.HaapiTokenManager
  @objc override dynamic public init()
  @objc deinit
}
extension IdsvrHaapiDriver.MimeTypes : Swift.Equatable {}
extension IdsvrHaapiDriver.MimeTypes : Swift.Hashable {}
extension IdsvrHaapiDriver.MimeTypes : Swift.RawRepresentable {}
